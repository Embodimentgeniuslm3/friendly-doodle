---
- duration: true
  module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.String"
  description: "Sets timeout for receiving acknowledgement for sent message. If acknowledgement\
    \ is not received within this timeout, sending is considered as failed and SPI\
    \ tries to repeat message sending."
  shortDescription: "Sets timeout for receiving acknowledgement for sent message."
  name: "cas.ticket.registry.ignite.ack-timeout"
  defaultValue: "PT2S"
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.Boolean"
  description: "Start in client mode. If true the local node is started as a client."
  shortDescription: "Start in client mode."
  name: "cas.ticket.registry.ignite.client-mode"
  defaultValue: false
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.Boolean"
  description: "Ignite native persistence is a distributed ACID and SQL-compliant\
    \ disk store that transparently integrates with Ignite's durable memory. Ignite\
    \ persistence is optional and can be turned on and off. When turned off Ignite\
    \ becomes a pure in-memory store. With the native persistence enabled, Ignite\
    \ always stores a superset of data on disk, and as much as it can in RAM based\
    \ on the capacity of the latter. For example, if there are 100 entries and RAM\
    \ has the capacity to store only 20, then all 100 will be stored on disk and only\
    \ 20 will be cached in RAM for better performance. Also, it is worth mentioning\
    \ that as with a pure in-memory use case, when the persistence is turned on, every\
    \ individual cluster node persists only a subset of the data, only including partitions\
    \ for which the node is either primary or backup. Collectively, the whole cluster\
    \ contains the full data set."
  shortDescription: "Ignite native persistence is a distributed ACID and SQL-compliant\
    \ disk store that transparently integrates with Ignite's durable memory."
  name: "cas.ticket.registry.ignite.default-persistence-enabled"
  defaultValue: false
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.Long"
  description: "By default, Ignite nodes consume up to 20% of the RAM available locally,\
    \ and in most cases, ​this is the only parameter you might need to change. Using\
    \ the below setting allows you to change the default region memory size."
  shortDescription: "By default, Ignite nodes consume up to 20% of the RAM available\
    \ locally, and in most cases, ​this is the only parameter you might need to change."
  name: "cas.ticket.registry.ignite.default-region-max-size"
  defaultValue: 0
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.Boolean"
  description: "Sets force server mode flag. If true {@code TcpDiscoverySpi} is started\
    \ in server mode regardless of {@code IgniteConfiguration.isClientMode()}."
  shortDescription: "Sets force server mode flag."
  name: "cas.ticket.registry.ignite.force-server-mode"
  defaultValue: false
- required: true
  module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.util.List<java.lang.String>"
  description: "Used by {@code TcpDiscoveryVmIpFinder} which is an IP Finder which\
    \ works only with pre-configured list of IP addresses specified via this setting.\
    \ By default, this IP finder is not shared, which means that all grid nodes have\
    \ to be configured with the same list of IP addresses when this IP finder is used.\
    \ Parses provided values and initializes the internal collection of addresses.\
    \ Addresses may be represented as follows: <ul> <li>IP address (e.g. 127.0.0.1,\
    \ 9.9.9.9, etc);</li> <li>IP address and port (e.g. 127.0.0.1:47500, 9.9.9.9:47501,\
    \ etc);</li> <li>IP address and port range (e.g. 127.0.0.1:47500..47510, 9.9.9.9:47501..47504,\
    \ etc);</li> <li>Hostname (e.g. host1.com, host2, etc);</li> <li>Hostname and\
    \ port (e.g. host1.com:47500, host2:47502, etc).</li> <li>Hostname and port range\
    \ (e.g. host1.com:47500..47510, host2:47502..47508, etc).</li> </ul> If port is\
    \ 0 or not provided then default port will be used (depends on discovery SPI configuration).\
    \ If port range is provided (e.g. host:port1..port2) the following should be considered:\
    \ <ul> <li>port1 &lt; port2 should be true;</li> <li>Both port1 and port2 should\
    \ be greater than 0.</li> </ul>"
  shortDescription: "Used by {@code TcpDiscoveryVmIpFinder} which is an IP Finder\
    \ which works only with pre-configured list of IP addresses specified via this\
    \ setting."
  name: "cas.ticket.registry.ignite.ignite-address"
  defaultValue: ""
- duration: true
  module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.String"
  description: "Sets join timeout. If non-shared IP finder is used and node fails\
    \ to connect to any address from IP finder, node keeps trying to join within this\
    \ timeout. If all addresses are still unresponsive, exception is thrown and node\
    \ startup fails."
  shortDescription: "Sets join timeout."
  name: "cas.ticket.registry.ignite.join-timeout"
  defaultValue: "PT1S"
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.String"
  description: "The key algorithm to use when creating SSL context."
  shortDescription: "The key algorithm to use when creating SSL context."
  name: "cas.ticket.registry.ignite.key-algorithm"
  defaultValue: "SunX509"
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.String"
  description: "Keystore file path used to create a SSL context for the ticket registry."
  shortDescription: "Keystore file path used to create a SSL context for the ticket\
    \ registry."
  name: "cas.ticket.registry.ignite.key-store-file-path"
  defaultValue: ""
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.String"
  description: "Keystore password used to create a SSL context for the ticket registry."
  shortDescription: "Keystore password used to create a SSL context for the ticket\
    \ registry."
  name: "cas.ticket.registry.ignite.key-store-password"
  defaultValue: ""
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.String"
  description: "Keystore type used to create a SSL context for the ticket registry."
  shortDescription: "Keystore type used to create a SSL context for the ticket registry."
  name: "cas.ticket.registry.ignite.key-store-type"
  defaultValue: "JKS"
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.String"
  description: "Sets local host IP address that discovery SPI uses. If not provided,\
    \ by default a first found non-loopback address will be used. If there is no non-loopback\
    \ address available, then {@code InetAddress.getLocalHost()} will be used."
  shortDescription: "Sets local host IP address that discovery SPI uses."
  name: "cas.ticket.registry.ignite.local-address"
  defaultValue: ""
- required: true
  module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.Integer"
  description: "Sets local port to listen to."
  shortDescription: "Sets local port to listen to."
  name: "cas.ticket.registry.ignite.local-port"
  defaultValue: -1
- duration: true
  module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.String"
  description: "Sets maximum network timeout to use for network operations."
  shortDescription: "Sets maximum network timeout to use for network operations."
  name: "cas.ticket.registry.ignite.network-timeout"
  defaultValue: "PT5S"
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.String"
  description: "SSL protocol used to create a SSL context for the ticket registry."
  shortDescription: "SSL protocol used to create a SSL context for the ticket registry."
  name: "cas.ticket.registry.ignite.protocol"
  defaultValue: "TLS"
- duration: true
  module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.String"
  description: "Sets socket operations timeout. This timeout is used to limit connection\
    \ time and write-to-socket time. Note that when running Ignite on Amazon EC2,\
    \ socket timeout must be set to a value significantly greater than the default\
    \ (e.g. to 30000)."
  shortDescription: "Sets socket operations timeout."
  name: "cas.ticket.registry.ignite.socket-timeout"
  defaultValue: "PT5S"
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.Integer"
  description: "Sets thread priority. All threads within SPI will be started with\
    \ it."
  shortDescription: "Sets thread priority."
  name: "cas.ticket.registry.ignite.thread-priority"
  defaultValue: 10
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties.TicketsCache"
  type: "java.lang.String"
  description: "Specifies the atomicity mode. <ul> <li>{@code ATOMIC}: Specifies atomic-only\
    \ cache behaviour. In this mode distributed transactions and distributed locking\
    \ are not supported. Disabling transactions and locking allows to achieve much\
    \ higher performance and throughput ratios. In addition to transactions and locking,\
    \ one of the main differences in ATOMIC mode is that bulk writes, such as putAll(...),\
    \ removeAll(...), and transformAll(...) methods, become simple batch operations\
    \ which can partially fail. In case of partial failure CachePartialUpdateCheckedException\
    \ will be thrown which will contain a list of keys for which the update failed.\
    \ It is recommended that bulk writes are used whenever multiple keys need to be\
    \ inserted or updated in cache, as they reduce number of network trips and provide\
    \ better performance. Note that even without locking and transactions, ATOMIC\
    \ mode still provides full consistency guarantees across all cache nodes. Also\
    \ note that all data modifications in ATOMIC mode are guaranteed to be atomic\
    \ and consistent with writes to the underlying persistent store, if one is configured.</li>\
    \ <li>{@code TRANSACTIONAL}: Specifies fully ACID-compliant transactional cache\
    \ behavior.</li> </ul>"
  shortDescription: "Specifies the atomicity mode."
  name: "cas.ticket.registry.ignite.tickets-cache.atomicity-mode"
  defaultValue: "TRANSACTIONAL"
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties.TicketsCache"
  type: "java.lang.String"
  description: "Specified the caching mode. <ul> <li>{@code LOCAL}: Specifies local-only\
    \ cache behaviour. In this mode caches residing on different grid nodes will not\
    \ know about each other. Other than distribution, local caches still have all\
    \ the caching features, such as eviction, expiration, swapping, querying, etc...\
    \ This mode is very useful when caching read-only data or data that automatically\
    \ expires at a certain interval and then automatically reloaded from persistence\
    \ store.</li> <li> {@code REPLICATED}: Specifies fully replicated cache behavior.\
    \ In this mode all the keys are distributed to all participating nodes. User still\
    \ has affinity control over subset of nodes for any given key via AffinityFunction\
    \ configuration. </li> <li> {@code PARTITIONED}: Specifies partitioned cache behaviour.\
    \ In this mode the overall key set will be divided into partitions and all partitions\
    \ will be split equally between participating nodes. User has affinity control\
    \ over key assignment via AffinityFunction configuration. Note that partitioned\
    \ cache is always fronted by local 'near' cache which stores most recent data.\
    \ You can configure the size of near cache via NearCacheConfiguration.getNearEvictionPolicy()\
    \ configuration property. </li> </ul>"
  shortDescription: "Specified the caching mode."
  name: "cas.ticket.registry.ignite.tickets-cache.cache-mode"
  defaultValue: "REPLICATED"
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties.TicketsCache"
  type: "java.lang.String"
  description: "Mode indicating how Ignite should wait for write replies from other\
    \ nodes. Default value is FULL_ASYNC}, which means that Ignite will not wait for\
    \ responses from participating nodes. This means that by default remote nodes\
    \ may get their state updated slightly after any of the cache write methods complete,\
    \ or after Transaction.commit() method completes. <ul> <li> {@code FULL_ASYNC}:\
    \ Flag indicating that Ignite will not wait for write or commit responses from\
    \ participating nodes, which means that remote nodes may get their state updated\
    \ a bit after any of the cache write methods complete, or after {@code Transaction.commit()}\
    \ method completes. </li> <li> {@code FULL_SYNC}: Flag indicating that Ignite\
    \ should wait for write or commit replies from all nodes. This behavior guarantees\
    \ that whenever any of the atomic or transactional writes complete, all other\
    \ participating nodes which cache the written data have been updated. </li> <li>\
    \ {@code PRIMARY_SYNC}: This flag only makes sense for CacheMode.PARTITIONED mode.\
    \ When enabled, Ignite will wait for write or commit to complete on primary node,\
    \ but will not wait for backups to be updated. </li> </ul>"
  shortDescription: "Mode indicating how Ignite should wait for write replies from\
    \ other nodes."
  name: "cas.ticket.registry.ignite.tickets-cache.write-synchronization-mode"
  defaultValue: "FULL_SYNC"
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.String"
  description: "Truststore file path used to create a SSL context for the ticket registry."
  shortDescription: "Truststore file path used to create a SSL context for the ticket\
    \ registry."
  name: "cas.ticket.registry.ignite.trust-store-file-path"
  defaultValue: ""
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.String"
  description: "Truststore password used to create a SSL context for the ticket registry."
  shortDescription: "Truststore password used to create a SSL context for the ticket\
    \ registry."
  name: "cas.ticket.registry.ignite.trust-store-password"
  defaultValue: ""
- module: "cas-server-support-ignite-ticket-registry"
  owner: "org.apereo.cas.configuration.model.support.ignite.IgniteProperties"
  type: "java.lang.String"
  description: "Truststore type used to create a SSL context for the ticket registry."
  shortDescription: "Truststore type used to create a SSL context for the ticket registry."
  name: "cas.ticket.registry.ignite.trust-store-type"
  defaultValue: "JKS"
