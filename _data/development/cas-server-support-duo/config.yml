---
- module: "cas-server-support-duo"
  owner: "org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties"
  type: "boolean"
  description: "When set to {@code true}, CAS will contact Duo Security\nto check\
    \ for user's account status and to evaluate whether\nuser qualifies for multifactor\
    \ authentication from Duo's perspective.\nWhen disabled, user account status is\
    \ set to authenticate with Duo\nand the API call will never be made."
  shortDescription: "When set to {@code true}, CAS will contact Duo Security to check\
    \ for user's account status and to evaluate whether user qualifies for multifactor\
    \ authentication from Duo's perspective."
  name: "cas.authn.mfa.duo[].account-status-enabled"
  defaultValue: true
- required: true
  module: "cas-server-support-duo"
  owner: "org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "Duo API host and url."
  shortDescription: "Duo API host and url."
  name: "cas.authn.mfa.duo[].duo-api-host"
  defaultValue: ""
- required: true
  module: "cas-server-support-duo"
  owner: "org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "The application key is a string, at least 40 characters long,\nthat\
    \ you generate and keep secret from Duo.\nThis is a required setting for the WebSDK\
    \ integration types.\nLeaving this setting as blank will activate the Universal\
    \ Prompt option.\n\nYou can generate a random string in Python with:\n&lt;pre&gt;\n\
    import os, hashlib\nprint hashlib.sha1(os.urandom(32)).hexdigest()\n&lt;/pre&gt;"
  shortDescription: "The application key is a string, at least 40 characters long,\
    \ that you generate and keep secret from Duo."
  name: "cas.authn.mfa.duo[].duo-application-key"
  defaultValue: ""
- required: true
  module: "cas-server-support-duo"
  owner: "org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "Duo integration key."
  shortDescription: "Duo integration key."
  name: "cas.authn.mfa.duo[].duo-integration-key"
  defaultValue: ""
- required: true
  module: "cas-server-support-duo"
  owner: "org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "Duo secret key."
  shortDescription: "Duo secret key."
  name: "cas.authn.mfa.duo[].duo-secret-key"
  defaultValue: ""
- module: "cas-server-support-duo"
  owner: "org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties"
  type: "org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties.MultifactorAuthenticationProviderFailureModes"
  description: "The failure mode policy for this MFA provider. The authentication\
    \ policy by default\nsupports fail-closed mode, which means that if you attempt\
    \ to\nexercise a particular provider available to CAS and the provider cannot\
    \ be reached, authentication\nwill be stopped and an error will be displayed.\
    \ You can of course change this behavior so that authentication\nproceeds without\
    \ exercising the provider functionality, if that provider cannot respond.\nEach\
    \ defined multifactor authentication provider can set its own failure mode policy.\
    \ Failure modes set at this location\nwill override the global failure mode, but\
    \ defer to any failure mode set by the registered service.\nAvailable values are\
    \ as follows:\n<ul><li>{@code OPEN}: Disallow MFA, proceed with authentication\
    \ but don't communicate MFA to the RP.</li><li>{@code CLOSED}: Disallow MFA, block\
    \ with authentication.</li><li>{@code PHANTOM}: Disallow MFA, proceed with authentication\
    \ and communicate MFA to the RP.</li><li>{@code NONE}: Do not check for failure\
    \ at all.</li><li>{@code UNDEFINED}: The default one indicating that no failure\
    \ mode is set at all.</li></ul>"
  shortDescription: "The failure mode policy for this MFA provider."
  name: "cas.authn.mfa.duo[].failure-mode"
  defaultValue: "CLOSED"
- module: "cas-server-support-duo"
  owner: "org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "The identifier for the multifactor provider.\nIn most cases, this\
    \ need not be configured explicitly, unless\nmultiple instances of the same provider\
    \ type are configured in CAS."
  shortDescription: "The identifier for the multifactor provider."
  name: "cas.authn.mfa.duo[].id"
  defaultValue: ""
- module: "cas-server-support-duo"
  owner: "org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "The name of the authentication handler used to verify credentials\
    \ in MFA."
  shortDescription: "The name of the authentication handler used to verify credentials\
    \ in MFA."
  name: "cas.authn.mfa.duo[].name"
  defaultValue: ""
- module: "cas-server-support-duo"
  owner: "org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties"
  type: "int"
  description: "The order of the authentication handler in the chain."
  shortDescription: "The order of the authentication handler in the chain."
  name: "cas.authn.mfa.duo[].order"
  defaultValue: "MAX_VALUE"
- module: "cas-server-support-duo"
  owner: "org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties"
  type: "int"
  description: "At times, CAS needs to determine the correct provider when step-up\
    \ authentication is required.\nConsider for a moment that CAS already has established\
    \ an SSO session with/without a provider and has\nreached a level of authentication.\
    \ Another incoming request attempts to exercise that SSO\nsession with a different\
    \ and often competing authentication requirement that may differ from the\nauthentication\
    \ level CAS has already established. Concretely, examples may be:\n<ul>\n<li>CAS\
    \ has achieved an SSO session, but a separate request now requires step-up authentication\
    \ with DuoSecurity.</li>\n<li>CAS has achieved an SSO session with an authentication\
    \ level satisfied by DuoSecurity,\nbut a separate request now requires step-up\
    \ authentication with YubiKey. </li>\n</ul>\nIn certain scenarios, CAS will attempt\
    \ to rank authentication levels and compare them with each other.\nIf CAS already\
    \ has achieved a level that is higher than what the incoming request requires,\n\
    no step-up authentication will be performed. If the opposite is true, CAS will\
    \ route the authentication\nflow to the required authentication level and upon\
    \ success, will adjust the SSO session with the\nnew higher authentication level\
    \ now satisfied.\nRanking of authentication methods is done per provider via specific\
    \ properties for each.\nNote that the higher the rank value is, the higher on\
    \ the security scale it remains.\nA provider that ranks higher with a larger weight\
    \ value trumps and override others with a lower value."
  shortDescription: "At times, CAS needs to determine the correct provider when step-up\
    \ authentication is required."
  name: "cas.authn.mfa.duo[].rank"
  defaultValue: ""
- module: "cas-server-support-duo"
  owner: "org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "Link to a registration app, typically developed in-house\nin order\
    \ to allow new users to sign-up for duo functionality.\nIf the user account status\
    \ requires enrollment and this link\nis specified, CAS will redirect the authentication\
    \ flow\nto this registration app. Otherwise, the default duo mechanism\nfor new-user\
    \ registrations shall take over."
  shortDescription: "Link to a registration app, typically developed in-house in order\
    \ to allow new users to sign-up for duo functionality."
  name: "cas.authn.mfa.duo[].registration-url"
  defaultValue: ""
- module: "cas-server-support-duo"
  owner: "org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties"
  type: "boolean"
  description: "Indicates whether this provider should support trusted devices."
  shortDescription: "Indicates whether this provider should support trusted devices."
  name: "cas.authn.mfa.duo[].trusted-device-enabled"
  defaultValue: ""
