---
- module: "cas-server-support-simple-mfa"
  owner: "org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties"
  type: "org.apereo.cas.configuration.model.support.mfa.BaseMultifactorAuthenticationProviderProperties$MultifactorAuthenticationProviderFailureModes"
  description: "The failure mode policy for this MFA provider. The authentication\
    \ policy by default supports fail-closed mode, which means that if you attempt\
    \ to exercise a particular provider available to CAS and the provider cannot be\
    \ reached, authentication will be stopped and an error will be displayed. You\
    \ can of course change this behavior so that authentication proceeds without exercising\
    \ the provider functionality, if that provider cannot respond. Each defined multifactor\
    \ authentication provider can set its own failure mode policy. Failure modes set\
    \ at this location will override the global failure mode, but defer to any failure\
    \ mode set by the registered service.\nAvailable values are as follows:\n<ul><li>{@code\
    \ OPEN}: Disallow MFA, proceed with authentication but don't communicate MFA to\
    \ the RP.</li><li>{@code CLOSED}: Disallow MFA, block with authentication.</li><li>{@code\
    \ PHANTOM}: Disallow MFA, proceed with authentication and communicate MFA to the\
    \ RP.</li><li>{@code NONE}: Do not check for failure at all.</li><li>{@code UNDEFINED}:\
    \ The default one indicating that no failure mode is set at all.</li></ul>"
  shortDescription: "The failure mode policy for this MFA provider."
  name: "cas.authn.mfa.simple.failure-mode"
  defaultValue: "CLOSED"
- module: "cas-server-support-simple-mfa"
  owner: "org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "The identifier for the multifactor provider. In most cases, this need\
    \ not be configured explicitly, unless multiple instances of the same provider\
    \ type are configured in CAS."
  shortDescription: "The identifier for the multifactor provider."
  name: "cas.authn.mfa.simple.id"
  defaultValue: ""
- module: "cas-server-support-simple-mfa"
  owner: "org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "The name of the authentication handler used to verify credentials\
    \ in MFA."
  shortDescription: "The name of the authentication handler used to verify credentials\
    \ in MFA."
  name: "cas.authn.mfa.simple.name"
  defaultValue: ""
- module: "cas-server-support-simple-mfa"
  owner: "org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties"
  type: "java.lang.Integer"
  description: "The order of the authentication handler in the chain."
  shortDescription: "The order of the authentication handler in the chain."
  name: "cas.authn.mfa.simple.order"
  defaultValue: ""
- module: "cas-server-support-simple-mfa"
  owner: "org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties"
  type: "java.lang.Integer"
  description: "At times, CAS needs to determine the correct provider when step-up\
    \ authentication is required. Consider for a moment that CAS already has established\
    \ an SSO session with/without a provider and has reached a level of authentication.\
    \ Another incoming request attempts to exercise that SSO session with a different\
    \ and often competing authentication requirement that may differ from the authentication\
    \ level CAS has already established. Concretely, examples may be: <ul> <li>CAS\
    \ has achieved an SSO session, but a separate request now requires step-up authentication\
    \ with DuoSecurity.</li> <li>CAS has achieved an SSO session with an authentication\
    \ level satisfied by DuoSecurity, but a separate request now requires step-up\
    \ authentication with YubiKey. </li> </ul> In certain scenarios, CAS will attempt\
    \ to rank authentication levels and compare them with each other. If CAS already\
    \ has achieved a level that is higher than what the incoming request requires,\
    \ no step-up authentication will be performed. If the opposite is true, CAS will\
    \ route the authentication flow to the required authentication level and upon\
    \ success, will adjust the SSO session with the new higher authentication level\
    \ now satisfied. Ranking of authentication methods is done per provider via specific\
    \ properties for each. Note that the higher the rank value is, the higher on the\
    \ security scale it remains. A provider that ranks higher with a larger weight\
    \ value trumps and override others with a lower value."
  shortDescription: "At times, CAS needs to determine the correct provider when step-up\
    \ authentication is required."
  name: "cas.authn.mfa.simple.rank"
  defaultValue: 0
- module: "cas-server-support-simple-mfa"
  owner: "org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties"
  type: "java.lang.Long"
  description: "Time in seconds that CAS tokens should be considered live in CAS server."
  shortDescription: "Time in seconds that CAS tokens should be considered live in\
    \ CAS server."
  name: "cas.authn.mfa.simple.time-to-kill-in-seconds"
  defaultValue: 30
- module: "cas-server-support-simple-mfa"
  owner: "org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties"
  type: "java.lang.Integer"
  description: "The length of the generated token."
  shortDescription: "The length of the generated token."
  name: "cas.authn.mfa.simple.token-length"
  defaultValue: 6
- module: "cas-server-support-simple-mfa"
  owner: "org.apereo.cas.configuration.model.support.mfa.CasSimpleMultifactorAuthenticationProperties"
  type: "java.lang.Boolean"
  description: "Indicates whether this provider should support trusted devices."
  shortDescription: "Indicates whether this provider should support trusted devices."
  name: "cas.authn.mfa.simple.trusted-device-enabled"
  defaultValue: false
